/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.draw.ui;

import com.draw.Drawer;
import com.draw.GUIProperties;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author vivekhegde
 */
public class GUI extends JFrame {

    /**
     * Creates new form GUI
     */
    GUIProperties properties;
    private JLabel jDialogLabel;
    private JButton jDialogButton;
    // Variables declaration - do not modify
    private JButton jBrowseButton;
    private JButton jProcessButton;
    private JCheckBox jCheckBox1;
    private JFileChooser jFileChooser1;
    private JLabel jFileErrorLabel;
    private JTextField jFileTextField;
    private JDialog jDialog;
    private JPanel labelPanel;
    private File output;
    public GUI(GUIProperties properties) {
        this.properties = properties;
        initComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        jDialog = new JDialog();
        jDialogLabel = new JLabel();
        jDialogButton = new JButton();
        jFileChooser1 = new JFileChooser();
        jCheckBox1 = new JCheckBox();
        jFileTextField = new JTextField();
        jBrowseButton = new JButton();
        jProcessButton = new JButton();
        jFileErrorLabel = new JLabel();
        labelPanel = new JPanel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jCheckBox1.setText("include foreign keys");
        jCheckBox1.addItemListener(this::jCheckBox1StateChanged);

        jFileTextField.setToolTipText("use comma(,) superater for multiple files");
        jFileTextField.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                jFileTextFieldKeyTyped(evt);
            }
        });
        jBrowseButton.setText("Browse");
        jBrowseButton.addActionListener(this::jButton1ActionPerformed);

        jProcessButton.setText("Convert");
        jProcessButton.addActionListener(this::jProcessButtonActionPerformed);

        jFileErrorLabel.setForeground(new Color(255, 51, 51));
        jFileErrorLabel.setText("* Enter valid file path");
        jFileErrorLabel.setVisible(false);

        jFileChooser1.setFileFilter(new FileNameExtensionFilter(".xml","xml"));
        jFileChooser1.setMultiSelectionEnabled(true);
        jFileChooser1.setCurrentDirectory(new File("/Users/vivekhegde/Vivi/MyProjects/daigram.io/"));


        jDialogButton.setText("Ok");
        jDialogButton.addActionListener(this::jDialogButtonActionPerformed);

        jDialog.getContentPane().setLayout(
                new BoxLayout(jDialog.getContentPane(), BoxLayout.Y_AXIS));


        labelPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        labelPanel.setPreferredSize(new Dimension(jDialogLabel.getText().length()*8, 100));
        labelPanel.add(jDialogLabel);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        buttonPanel.setPreferredSize(new Dimension(50, 50));
        buttonPanel.setMaximumSize(new Dimension(150, 50)); // set max = pref
        buttonPanel.add(jDialogButton);

        jDialog.getContentPane().add(labelPanel);
        jDialog.getContentPane().add(buttonPanel);

        jDialog.setLocationRelativeTo(this);


        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(25, 25, 25)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(jCheckBox1)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jFileTextField, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jBrowseButton))
                                                        .addComponent(jFileErrorLabel)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(160, 160, 160)
                                                .addComponent(jProcessButton)))
                                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jFileTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jBrowseButton))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFileErrorLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addComponent(jProcessButton)
                                .addContainerGap(19, Short.MAX_VALUE))
        );
        setLocationRelativeTo(null);
        pack();
    }// </editor-fold>

    private void jDialogButtonActionPerformed(ActionEvent evt) {
        jDialog.setVisible(false);
    }

    private void jDialogButtonFileOpen(ActionEvent event){

        try {
            Desktop.getDesktop().open(output.getAbsoluteFile().getParentFile());
            jDialog.setVisible(false);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private void jButton1ActionPerformed(ActionEvent evt) {
        int retVal = jFileChooser1.showDialog(this,"select");
        if (retVal == JFileChooser.APPROVE_OPTION) {
            StringBuilder filePath = new StringBuilder();
            for (File file: jFileChooser1.getSelectedFiles()) {
                filePath.append(file.getAbsolutePath());
                filePath.append(",");
            }
            if(filePath.indexOf(",")!=-1){
                filePath.deleteCharAt(filePath.length()-1);
            }
            jFileTextField.setText(filePath.toString());
            properties.setSelectedFiles(jFileChooser1.getSelectedFiles());
        }
    }

    private void jCheckBox1StateChanged(ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED){
            properties.setAddArrow(true);
        }else{
            properties.setAddArrow(false);
        }
    }

    private void jProcessButtonActionPerformed(ActionEvent evt) {
        try {
            output = new Drawer().drawDocument(properties);
            showDialog("Conversion succesful, draw xml stored in:: "+ output.getAbsolutePath(),true);
        } catch (Exception e) {
            e.printStackTrace();
            showDialog(e.getMessage(),false);
        }
    }

    private void jFileTextFieldKeyTyped(KeyEvent evt) {
        String filePaths = jFileTextField.getText()+evt.getKeyChar();
        String[] fileArray = filePaths.split(",");
        List<File> fileList = new ArrayList<>();
        for(String file:fileArray){
            int extIndex = file.lastIndexOf(".");
            if(extIndex == -1){
                jFileErrorLabel.setVisible(true);
                return;
            }
            if(!file.substring(extIndex).equals(".xml")){
                jFileErrorLabel.setVisible(true);
                return;
            }
            File file1 = new File(file);
            fileList.add(file1);
        }
        properties.setSelectedFiles((File[]) fileList.toArray());
        jFileErrorLabel.setVisible(false);
    }

    private void showDialog(String message,boolean isSuccess){
        System.out.println(message.length());
        jDialog.setMinimumSize(new Dimension(message.length()*8,90));
        labelPanel.setPreferredSize(new Dimension(message.length()*8,40));
        jDialogLabel.setText(message);
        jDialog.pack();
        jDialog.setVisible(true);
        if(isSuccess){
            jDialog.setTitle("Success");
            jDialogButton.setText("show in explorer");
            jDialogButton.addActionListener(this::jDialogButtonFileOpen);
        }else {
            jDialog.setTitle("error");
            jDialogButton.addActionListener(this::jDialogButtonActionPerformed);
        }
    }

    public static void invokeNewGUI(GUIProperties properties) {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(() -> new GUI(properties).setVisible(true));
    }

    // End of variables declaration
}
